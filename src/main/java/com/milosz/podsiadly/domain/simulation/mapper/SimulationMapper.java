package com.milosz.podsiadly.domain.simulation.mapper;

import com.milosz.podsiadly.domain.simulation.dto.ScenarioEventDto;
import com.milosz.podsiadly.domain.simulation.dto.SimulationConfigDto;
import com.milosz.podsiadly.domain.simulation.dto.SimulationRunStatusDto;
import com.milosz.podsiadly.domain.simulation.model.ScenarioEvent;
import com.milosz.podsiadly.domain.simulation.model.SimulationRun;
import com.milosz.podsiadly.domain.simulation.model.SimulationScenario;
import org.mapstruct.*; // Włącz MapStruct, aby można było używać @MappingTarget

import java.util.List;

@Mapper(
        componentModel = MappingConstants.ComponentModel.SPRING,
        unmappedTargetPolicy = ReportingPolicy.IGNORE // Ignore fields in target if no mapping exists
)
public interface SimulationMapper {

    // --- SimulationScenario Mappings ---
    @Mapping(target = "id", ignore = true) // ID will be generated by DB
    @Mapping(target = "createdAt", ignore = true) // Handled by @PrePersist
    @Mapping(target = "updatedAt", ignore = true) // Handled by @PreUpdate
    SimulationScenario toSimulationScenarioEntity(SimulationConfigDto dto);

    // Mapowanie z encji SimulationScenario na SimulationConfigDto
    @Mapping(target = "scenarioName", source = "scenarioName")
    @Mapping(target = "description", source = "description")
    @Mapping(target = "scenarioType", source = "scenarioType")
    @Mapping(target = "startDate", source = "startDate")
    @Mapping(target = "endDate", source = "endDate")
    @Mapping(target = "durationInDays", source = "durationInDays")
    @Mapping(target = "parameters", source = "parameters")
    SimulationConfigDto toSimulationConfigDto(SimulationScenario entity);

    List<SimulationConfigDto> toSimulationConfigDtoList(List<SimulationScenario> entities);

    // Update existing scenario (e.g., from an admin endpoint)
    // UWAGA: Jeśli SimulationConfigDto nie zawiera ID, to nie można go mapować jako source na ID targetu.
    // Metoda ta powinna aktualizować istniejącą encję na podstawie DTO.
    @Mapping(target = "id", ignore = true) // ID encji nie powinno być zmieniane przez DTO
    @Mapping(target = "createdAt", ignore = true) // Keep original creation date
    @Mapping(target = "updatedAt", ignore = true) // Handled by @PreUpdate
    void updateSimulationScenarioFromDto(SimulationConfigDto dto, @MappingTarget SimulationScenario entity);


    // --- SimulationRun Mappings ---
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "runIdentifier", ignore = true) // Generated in @PrePersist
    @Mapping(target = "startTime", ignore = true)     // Generated in @PrePersist
    @Mapping(target = "status", ignore = true)        // Generated in @PrePersist
    @Mapping(target = "simulationScenario", source = "scenario") // Map the full scenario object
    SimulationRun toSimulationRunEntity(SimulationScenario scenario); // Create run from a scenario

    @Mapping(target = "scenarioId", source = "simulationScenario.id")
    @Mapping(target = "scenarioName", source = "simulationScenario.scenarioName")
    SimulationRunStatusDto toSimulationRunStatusDto(SimulationRun entity);

    List<SimulationRunStatusDto> toSimulationRunStatusDtoList(List<SimulationRun> entities);


    // --- ScenarioEvent Mappings ---
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "eventTimestamp", ignore = true) // Generated in @PrePersist
    @Mapping(target = "simulationRun", source = "simulationRun") // Map the full run object
    ScenarioEvent toScenarioEventEntity(ScenarioEventDto dto, @Context SimulationRun simulationRun); // Requires run object, use @Context for clarity

    // Convert DTO to entity (useful if creating events directly via API without a full run object yet)
    // This mapping would typically be used after a SimulationRun is established.
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "eventTimestamp", ignore = true) // Generated in @PrePersist
    @Mapping(target = "simulationRun", ignore = true) // Will be set manually or in service
    ScenarioEvent toScenarioEventEntity(ScenarioEventDto dto); // Simplified mapping for creating new event

    @Mapping(target = "simulationRunId", source = "simulationRun.id")
    ScenarioEventDto toScenarioEventDto(ScenarioEvent entity);

    List<ScenarioEventDto> toScenarioEventDtoList(List<ScenarioEvent> entities);

}