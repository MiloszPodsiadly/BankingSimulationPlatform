package com.milosz.podsiadly.domain.compliance.mapper;

import com.milosz.podsiadly.domain.compliance.model.AuditLog;
import com.milosz.podsiadly.domain.compliance.dto.AuditLogEntryDto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;

import java.util.List;

@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface AuditMapper {

    /**
     * Converts an AuditLog entity to an AuditLogEntryDto record.
     * @param auditLog The AuditLog entity.
     * @return The corresponding AuditLogEntryDto record.
     */
    AuditLogEntryDto toDto(AuditLog auditLog);

    /**
     * Converts an AuditLogEntryDto record to an AuditLog entity.
     * Note: When converting DTO to Entity, typically fields like 'id' and 'timestamp'
     * might not be present or are handled by the database (e.g., auto-generation).
     * Hence, we might ignore them or explicitly map if needed for updates.
     * @param auditLogEntryDto The AuditLogEntryDto record.
     * @return The corresponding AuditLog entity.
     */
    // For DTO to Entity conversion, 'id' and 'timestamp' are often ignored or set by persistence layer.
    // If you need to update an existing entity, you'd usually pass the entity to update,
    // or use a separate method for creation.
    @Mapping(target = "id", ignore = true) // ID is usually generated by DB on creation
    @Mapping(target = "timestamp", ignore = true) // Timestamp is usually set by @CreatedDate
    AuditLog toEntity(AuditLogEntryDto auditLogEntryDto);

    /**
     * Converts a list of AuditLog entities to a list of AuditLogEntryDto records.
     * @param auditLogs The list of AuditLog entities.
     * @return The list of AuditLogEntryDto records.
     */
    List<AuditLogEntryDto> toDtoList(List<AuditLog> auditLogs);

    /**
     * Converts a list of AuditLogEntryDto records to a list of AuditLog entities.
     * @param auditLogEntryDtos The list of AuditLogEntryDto records.
     * @return The list of AuditLog entities.
     */
    List<AuditLog> toEntityList(List<AuditLogEntryDto> auditLogEntryDtos);
}